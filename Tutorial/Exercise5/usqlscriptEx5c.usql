//partitioning on column species

REFERENCE ASSEMBLY [ExtR];   //enable R extensions for the U-SQL Script

//declare the R script as a string variable and pass it as a parameter to the Reducer:
DECLARE @myRScript = @"
temp = inputFromUSQL
temp$sepal_length = as.numeric(as.character(temp$sepal_length))
temp$mynewcol = ncol(temp) 
temp$sum_sepal_length = sum(temp$sepal_length) 
outputToUSQL = temp
";

DECLARE @myInputFile string   = @"/TutorialMaterial/myiris.csv";
DECLARE @myOutputFile string = @"/TutorialMaterial/outex5c.txt";

DECLARE @PartitionCount int = 5;

@InputIrisData = EXTRACT 
sepal_length string,
sepal_width string,
petal_length string,
petal_width string,
species string	
FROM @myInputFile
//USING Extractors.Csv(skipFirstNRows: 1);
USING Extractors.Csv();  //if myInputFile file has no headers
	

// Instead of creating another column to partition on we will partition on species column 
//@ExtendedData = 
//SELECT Extension.R.RandomNumberGenerator.GetRandomNumber(@PartitionCount) AS Par,
//*
//FROM @InputIrisData;
 
@RScriptOutput = REDUCE @InputIrisData ON species 
PRODUCE  
sepal_length double,  //since changed the type in r script
sepal_width string,
petal_length string,
petal_width string,
species string,
mynewcol int,    
sum_sepal_length double   //Types shoud match between R and usql
//READONLY Par    //ask what this does, gives error
USING new Extension.R.Reducer(command:@myRScript, rReturnType:"dataframe");


OUTPUT @RScriptOutput TO @myOutputFile USING Outputters.Tsv();	
//OUTPUT @RScriptOutput TO @myOutputFile USING Outputters.Csv(outputHeader : true, quoting:false);  //if want the headers as well

